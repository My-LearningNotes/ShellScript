Shell命令行传递参数
===================

可以在执行Shell脚本时, 向其传递参数;
然后在脚本内以\ ``$n``\ 的格式获取参数, \ ``n``\ 代表一个数字，1表示第一个参数, 2表示第二个参数, 以此类推......

.. note::

    ``$0``\ 表示执行的文件名.

如果为Shell脚本传递的参数中包含空白字符, 应该使用单引号或双引号将参数括起来, 以便脚本将这个参数作为整体来接收.


Example:

.. code-block:: bash

    #!/usr/bin/env bash

    echo "first arg: $1"
    echo "second arg: $2"
    echo "third arg: $3""


与参数处理相关的几个特殊字符:

============= ======================================================================================
``$#``        传递到脚本中的参数个数(不包括脚本名自身)
``$*``        以一个单字符串显示所有向脚本传递的参数.

              如果\ ``$*``\ 用\ ``"``\ 括起来, 以\ ``"$1 $2 ... $n"``\ 的形式输出所有参数.
``$@``        与\ ``$*``\ 相同, 表示所有向脚本传递的参数.

              如果\ ``$@``\ 用\ ``"``\ 括起来, 以\ ``"$1" "$2" ... "$n"``\ 的形式输出所有参数
``$$``        脚本运行的当前进程ID
``$!``        后台运行的最后一个进程ID
``$-``        显示Shell使用的当前选项
``$?``        显示最后命令的退出状态, 0表示没有错误, 其他任何值表示有错误
============= ======================================================================================


``$*``\ 和\ ``$@``\ 的异同:

    *   相同点: 都是表示所有参数.

    *   不同点: 只有在双引号中体现出来.

        假设在脚本运行时传入了三个参数1, 2, 3, 则\ ``$*``\ 以\ ``"1 2 3"``\ 的形式(单个字符串)返回所有参数, 而\ ``$@``\ 以\ ``"1" "2" "3"``\ 的形式(字符串数组)返回所有参数.


Example:

.. code-block:: bash
    :emphasize-lines: 4, 9

    #!/usr/bin/env bash

    echo '--- $* 演示 ---'
    for i in "$*"
    do
        echo $i
    done

    echo '--- $@ 演示 ---'
    for i in "$@"
    do
        echo $i
    done

执行脚本, 输出结果如下:

.. code-block:: bash
    :emphasize-lines: 4, 6, 7, 8

    $ chmod a+x test.sh
    $ ./test.sh 1 2 3
    --- $* 演示 ---
    1 2 3
    --- $@ 演示 ---
    1
    2
    3

