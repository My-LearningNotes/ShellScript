Shell基本运算符
===============

Shell和其他编程语言一样, 支持多种运算符, 包括:

-   算术运算符

-   关系运算符

-   布尔运算符

-   字符串运算符

-   文件测试运算符


算术运算符
----------

原生bash不支持简单的数学运算, 但是可以通过其他命令来实现, 例如\ ``awk``\ 和\ ``expr``\ , \ ``expr``\ 最常用.

``expr``\ **是一个表达式计算工具, 使用它能完成表达式的求值计算.**

Example:

.. code-block:: bash
    :emphasize-lines: 5

    #!/usr/bin/env bash

    # 两个数相加
    # 注意使用的是反单引号, 不是单引号
    val=`expr 2 + 2`
    echo ${val}

-   **完整的表达式要用反单引号包裹;**

-   **表达式和运算符之间要有空格**, 例如\ ``2+2``\ 是不对的, 必须写成\ ``2 + 2``\ .


常用的算术运算符, 假定变量\ ``a``\ 和\ ``b``\ 为两个变量:

====== ================================= ==================
运算符 说明                              举例
``+``  加法                              ```expr $a + $b```
``-``  减法                              ```expr $a - $b```
``*``  乘法                              ```expr $a \* $b```
``/``  除法                              ```expr $a / $b```
``%``  取余                              ```expr $a % $b```
``=``  赋值                              ``a=$b``
``==`` 判断是否相等(相等则返回true)      ``[ $a == $b ]``
``!=`` 判断是否不相等(不相等则返回true)  ``[ $a != $b]``
====== ================================= ==================

注意:

-   作为条件进行判断时, 条件表达式要放在方括号中, 并且方括号和操作数之间, 条件运算符两侧都要有空格;

-   乘号(\ ``*``\ )前边必须加上反斜杠转义(\ ``\*``\ )才能实现乘法运算.


关系运算符
----------

**关系运算符只支持数字, 不支持字符串, 除非字符串的值是数字.**

下面列出了常用的关系运算符, 假定\ ``a``\ 和\ ``b``\ 为两个变量:

======= ============================================= =================
运算符  说明                                          举例
``-eq`` 判断两个数是否相等(equal)                     ``[ $a -eq $b ]``
``-ne`` 判断两个数是否不相等(not equal)               ``[ $a -ne $b ]``
``-gt`` 判断左边的数是否大于右边的(greater than)      ``[ $a -gt $b ]``
``-lt`` 判断左边的数是否小于右边的(less than)         ``[ $a -lt $b ]``
``-ge`` 判断左边的数是否大于等于右边的(greater equal) ``[ $a -ge $b ]``
``-le`` 判断左边的数是否小于等于右边的(less equal)    ``[ $a -le $b ]``
======= ============================================= =================


布尔运算符
----------

====== =========== =================================
运算符 说明        举例
``-a`` 与运算(and) ``[ $a −lt 20 −a $b -gt 100 ]``
``-o`` 或运算(or)  ``[ $a −lt 20 −o $b -gt 100 ]``
``!``  非运算(not) ``[ ! $a -lt 20 ]``
====== =========== =================================

-   在复合的条件表达式中, 布尔运算符的优先级是最低的;
-   在Shell编程中, 不能使用true/false来表示真假, 条件中出现的true/false都会被当成普通的字符串.

Example:

.. code-block:: bash

    if [ false ]
    then
        echo "true"
    else
        echo "flase"
    fi

    # 条件中的false作为普通字符串来处理
    # 非空为真, 所以打印的是"true"
    


字符串运算符
------------

======= ======================= ================
运算符  说明                    举例
``==``  判断两个字符串是否相等  ``[ $a == $b ]``
``!=``  判断两个字符串是否不等  ``[ $a != $b ]``
``-z``  判断字符串长度是否为0   ``[ -z $a ]``
``-n``  判断字符串长度是否不为0 ``[ -n $a ]``
``str`` 判断字符串是否为空      ``[ $a ]``
======= ======================= ================

.. note::

    将值作为条件判断时, 非空为真, 空为假.


文件测试运算符
--------------

文件测试运算符用于检测Unix文件的各种属性．

====== ================================================== ==================
运算符 说明                                               举例
``-b`` 检测文件是否是块设备文件                           ``[ -b ${file} ]``
``-c`` 检测文件是否是字符设备文件                         ``[ -c ${file} ]``
``-d`` 检测文件是否是目录                                 ``[ -d ${file} ]``
``-f`` 检测文件是否是普通文件(既不是目录，也不是设备文件) ``[ -f ${file} ]``
``-g`` 检测文件是否设置了SGID位                           ``[ -g ${file} ]``
``-k`` 检测文件是否设置了粘着位                           ``[ -k ${file} ]``
``-p`` 检测文件是否是有名管道                             ``[ -p ${file} ]``
``-u`` 检测文件是否设置了SUID位                           ``[ -u ${file} ]``
``-r`` 检测文件是否可读                                   ``[ -r ${file} ]``
``-w`` 检测文件是否可写                                   ``[ -w ${file} ]``
``-x`` 检测文件是否可执行                                 ``[ -x ${file} ]``
``-s`` 检测文件是否为空                                   ``[ -s ${file} ]``
``-e`` 检测文件(包括目录)是否存在                         ``[ -e ${file} ]``
====== ================================================== ==================

